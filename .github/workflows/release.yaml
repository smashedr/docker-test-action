name: "Release"

on:
  release:
    types: [published]

jobs:
  build:
    name: "Build"
    runs-on: ubuntu-latest
    timeout-minutes: 10

    permissions:
      contents: write
      packages: write

    steps:
      - name: "Checkout"
        uses: actions/checkout@v5

      - name: "Debug event.json"
        continue-on-error: true
        run: |
          cat "${GITHUB_EVENT_PATH}"

      - name: "Verify Action Tag"
        run: |
          set -e
          echo "Verifying Version TAG in action.yaml: ${GITHUB_REF_NAME}"
          echo "image: ghcr.io/${GITHUB_REPOSITORY}:${GITHUB_REF_NAME}"
          grep "ghcr.io/${GITHUB_REPOSITORY}:${GITHUB_REF_NAME}" action.yaml

      #- name: "Write Version: ${{ github.ref_name }}"
      #  run: |
      #    echo "version: ${GITHUB_REF_NAME}"
      #    echo -n "${GITHUB_REF_NAME}" > src/version.txt

      - name: "Docker Login"
        uses: docker/login-action@v3
        with:
          registry: "ghcr.io"
          username: ${{ vars.GHCR_USER }}
          password: ${{ secrets.GHCR_PASS }}

      - name: "Setup Buildx"
        uses: docker/setup-buildx-action@v3
      #  with:
      #    platforms: linux/amd64,linux/arm64

      - name: "Generate Docker Tags"
        id: tags
        uses: smashedr/docker-tags-action@v1
        with:
          images: "ghcr.io/${{ github.repository }}"
          tags: ${{ github.ref_name }}

      - name: "Debug Docker Tags"
        continue-on-error: true
        run: |
          echo "VERSION: ${{ github.ref_name }}"
          echo "tags: ${{ steps.tags.outputs.tags }}"
          echo "labels: ${{ steps.tags.outputs.labels }}"
          echo "annotations: ${{ steps.tags.outputs.annotations }}"

      - name: "Build and Push"
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          #platforms: linux/amd64,linux/arm64
          tags: ${{ steps.tags.outputs.tags }}
          labels: ${{ steps.tags.outputs.labels }}
          annotations: ${{ steps.tags.outputs.annotations }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}

      - name: "Rollback Release"
        if: ${{ failure() }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "\n### Deleted Release Body\n\n\`\`\`text" >> $GITHUB_STEP_SUMMARY
          echo "${{ github.event.release.body }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`\n" >> $GITHUB_STEP_SUMMARY
          echo "Deleting Release and Tag: ${{ github.ref_name }}"
          gh release delete ${{ github.ref_name }} --cleanup-tag

      - name: "Send Failure Notification"
        if: ${{ failure() }}
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}

  tags:
    name: "Tags"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [build]

    permissions:
      contents: write

    steps:
      - name: "Update Version Tags"
        id: version
        uses: cssnr/update-version-tags-action@v1

      - name: "Debug Version Tags"
        continue-on-error: true
        run: |
          echo "github.ref_name: ${{ github.ref_name }}"
          echo "steps.version.outputs.tags: ${{ steps.version.outputs.tags }}"

      - name: "Update Release Notes Action"
        continue-on-error: true
        uses: smashedr/update-release-notes-action@master
        with:
          tags: ${{ steps.version.outputs.tags }}
          location: tail

      - name: "Send Failure Notification"
        if: ${{ failure() }}
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
